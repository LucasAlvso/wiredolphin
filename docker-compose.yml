services:
  wiredolphin:
    image: wiredolphin:latest
    build: .
    container_name: wiredolphin
    mac_address: "02:42:ac:11:00:01"
    restart: unless-stopped

    # Capabilities needed to create tun interface, iptables, and open raw sockets
    cap_add:
      - NET_ADMIN
      - NET_RAW

    # Access to /dev/net/tun from host
    devices:
      - "/dev/net/tun:/dev/net/tun"

    # Enable forwarding inside container for NAT (if the tunnel sets it)
    sysctls:
      net.ipv4.ip_forward: "1"

    # Persist CSV logs and provide tunnel binary/source
    working_dir: /logs
    volumes:
      - ./logs:/logs

    # Environment configuration
    environment:
      # Analyzer interface; to decapsulate on the underlay, set to eth0 and enable DECAP_PROTO255
      - ANALYZER_IFACE=tun0
      - DECAP_PROTO255=true
      # Tunnel interface created by traffic_tunnel
      - TUN_IFACE=tun0
      # Physical/underlay interface (inside the container) used by the tunnel server
      - TUN_UNDERLAY_IF=eth0
      # Whether to start the tunnel process; set to false if you already run tunnel externally
      - TUN_START=true
      # Seconds to wait for IFACE to appear
      - TUN_WAIT_TIMEOUT=20
      # Tunnel address to assign if not configured by the tunnel binary
      - TUN_ADDR_CIDR=172.31.66.1/24
      # Enable NAT on the underlay interface
      - TUN_ENABLE_NAT=true
      # Enable UDP encapsulation for tunnel (more portable across Docker bridges)
      - TUN_USE_UDP=true
      - TUN_UDP_PORT=5555

  client1:
    image: wiredolphin:latest
    depends_on:
      - wiredolphin
    container_name: wiredolphin-client1
    cap_add:
      - NET_ADMIN
      - NET_RAW
    devices:
      - "/dev/net/tun:/dev/net/tun"
    volumes:
      - ./traffic_tunnel:/client-config:ro
    environment:
      - IFACE=tun0
      - CLIENT_UNDERLAY_IF=eth0
      - CLIENT_SCRIPT=/client-config/client1.sh
      # Use broadcast delivery for tunnel frames to improve compatibility across Docker/host bridges
      # Leave TUN_PEER_MAC unset to broadcast; set it to a MAC to force unicast
      # - TUN_PEER_MAC=02:42:ac:11:00:01
      # Generate some traffic through the tunnel
      - GEN_TRAFFIC=true
      - PING_TARGET=1.1.1.1
      - PING_COUNT=3
      - HTTP_URL=http://example.com/
      - DNS_NAME=example.com
      - DNS_SERVER=1.1.1.1
      - NTP_SERVER=pool.ntp.org
      - TUN_WAIT_TIMEOUT=20
      # UDP encapsulation settings
      - TUN_USE_UDP=true
      - TUN_UDP_PORT=5555
      - TUN_PEER_IP=wiredolphin
    entrypoint: ["/entrypoint-client.sh"]

  client2:
    image: wiredolphin:latest
    depends_on:
      - wiredolphin
    container_name: wiredolphin-client2
    cap_add:
      - NET_ADMIN
      - NET_RAW
    devices:
      - "/dev/net/tun:/dev/net/tun"
    volumes:
      - ./traffic_tunnel:/client-config:ro
    environment:
      - IFACE=tun0
      - CLIENT_UNDERLAY_IF=eth0
      - CLIENT_SCRIPT=/client-config/client2.sh
      # Use broadcast delivery for tunnel frames to improve compatibility across Docker/host bridges
      # Leave TUN_PEER_MAC unset to broadcast; set it to a MAC to force unicast
      # - TUN_PEER_MAC=02:42:ac:11:00:01
      - GEN_TRAFFIC=true
      - PING_TARGET=8.8.8.8
      - PING_COUNT=3
      - HTTP_URL=http://example.org/
      - DNS_NAME=cloudflare.com
      - DNS_SERVER=8.8.8.8
      - NTP_SERVER=time.google.com
      - TUN_WAIT_TIMEOUT=20
      # UDP encapsulation settings
      - TUN_USE_UDP=true
      - TUN_UDP_PORT=5555
      - TUN_PEER_IP=wiredolphin
    entrypoint: ["/entrypoint-client.sh"]
